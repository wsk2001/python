/******************************************************************
note : 메뉴바 JS v3.0.7
name : 김지수
date : 2019-10-28

[css class 설명]
.a-hover	 : hover시 메인 메뉴 a 태그 색상
.a-active	 : 현재 페이지 or a-hover 클래스 적용 메뉴 (style 없음)
.a-sub-hover : hover시 서브 메뉴 a 태그 색상

[스크립트 변수]
menuIndexHold		: index 페이지 일 떄 메뉴 a-hover 여부 (true : 첫번쨰 메뉴 a-hover / false : none)
menuOverHold		: hover시 메뉴 a-hover 고정 (true : 현재페이지 메뉴 a-hover 고정 / false : 고정 x) 
submenuStyle		: 서브메뉴 펼침 스타일 (horizon : 가로형, vertical : 세로형)
sizeMode			: 사이즈 모드 (basic : 기본 / full : 전체)
subShow				: 서브메뉴 보이기 ( hold : 노출 / hidden : 비노출 / page : page에서만 노출 ) - horizon 일때만 적용
submenuPosi		: left / center / right
effectSwitch			: on / off - slide & fade 효과 사용여부
subSlideSpeed		: 서브메뉴 slide down 속도(default = 300)
subFadeSpeed		: 서브메뉴 fade out 속도(default = 300)  - vertical 일때만 적용
******************************************************************/

(function($){

	if(!$ || $=="undefined") return;

	$(function(){

		// 현재페이지 섹션코드값
		var mainSecCode 	= $("#header-wrapper").attr("data-main-code");			// 1차
		var subSecCode 		= $("#header-wrapper").attr("data-sub-code");			// 2차
		var serialSecCode 	= $("#header-wrapper").attr("data-serial-code");		// 연재
		var multiSecCode 	= $("#header-wrapper").attr("data-multi-code");        	// 다중섹션

		// index 일때 첫번째 섹션에 a-hover (menuIndexHold 가 true일 때)
		if(menuIndexHold == true) {
			if((mainSecCode.indexOf("index") == 1 || mainSecCode == "/" || mainSecCode == "/news/articleList.html" || mainSecCode == "/edit/webPublishing.php") && multiSecCode == "") {
				$("ul#user-menu > li").first().children("a").addClass("a-hover a-active");
			}
		}

		// 링크 섹션코드
		var linkSecCode = "";

		$("ul#user-menu li").each(function(idx, ele){

			linkSecCode = $(ele).children("a").attr("data-code");	// 섹션코드

			/******************************************************************
			* note : add hover class
			*
			* [설명]
			* 각 섹션 a 태그에 설정된 섹션 코드가 menubar.php > #user-nav에 설정된
			* 섹션코드(mainSecCode / subSecCode / serialSecCode)에 포함되어 있다면 
			* 해당 섹션이 1차이면 a-hover, a-active 클래스를 2차이면 a-sub-hover 클래스를 추가한다.
			******************************************************************/
			if([mainSecCode, subSecCode, serialSecCode, multiSecCode].indexOf(linkSecCode) >= 0){
				if($(ele).hasClass("secline")) {		// 1차
					$("ul#user-menu > li > a").removeClass("a-hover");		// 초기화
					$(ele).children("a").addClass("a-hover a-active");
				} else {	// 2차
					$("ul#user-menu > li > ul > li > a").removeClass("a-sub-hover");		// 초기화
					$(ele).children("a").addClass("a-sub-hover");
					if($(ele).children("a").hasClass("a-sub-hover")){
						$(ele).parent("ul").parent("li.secline").children("a").addClass("a-hover a-active");
					}
				}
			}

			/******************************************************************
			* note : mouse hover event
			*
			* [설명 및 참고]
			* 2차 메뉴를 show() / hide() 의 방식으로 처리하지 않은 이유는
			* 2차 메뉴가 좌/우측 을 벗어날 경우 위치값 계산을 위해 처음 2차 섹션의 넓이를 가져와야 하는데,
			* display : none 인 상태에선 넓이를 가져올 수 없기 때문에 visibility 스타일을 사용하였습니다.
			* (visibility:visible -> hide() -> slideDown() / slideDown() 메소드는 display:none인 상태여야 동작하기 때문)
			******************************************************************/
			if($(ele).hasClass("secline")){
				$(ele).hover(function(){		// mouse enter(over)

					if(submenuStyle == "horizon") {	// horizon

						$("ul#user-menu > li > a").removeClass("a-hover");			// 1차섹션 a-hover 초기화
						$(ele).children("a").addClass("a-hover");						// 해당섹션(마우스오버) a-hover 추가

						if(menuOverHold == true){		// 옵션값 menuOverHold 가 true 일때

							$("ul#user-menu > li > ul").css("visibility", "hidden");		// 2차섹션 초기화

							if($(ele).find("ul > li").length <= 0) return;						// 2차 섹션이 없으면 return
							$("#user-nav").addClass("active");								// 2차 섹션 배경

							if($(ele).children("ul").is(":animated") == false){				// 2차 섹션 동작하지 않을 때
								if($(ele).children("a").hasClass("a-active")){				// 1차 섹션이 a-active 클래스를 가지고 있을 때

									if(subShow == "hidden" || subShow == "page") {		// 2차 보기 옵션(subShow)이 hidden 또는 page 일 때

										if(effectSwitch == "on") {	// 슬라이드 효과 on
											$(ele).children("ul").css("visibility", "visible").hide().slideDown(subSlideSpeed);	// 2차
										} else {	// 슬라이드 효과 off
											$(ele).children("ul").css("visibility", "visible");	// 2차
										}

									} else {		// 2차 보기 옵션(subShow)이 hold 일 때
										$(ele).children("ul").css("visibility", "visible");	// 2차
									}

								} else {	// 1차 섹션이 a-active 클래스를 가지고 있지 않을 때

									if(effectSwitch == "on") {	// 슬라이드 효과 on
										$(ele).children("ul").css("visibility", "visible").hide().slideDown(subSlideSpeed);		// 2차
									} else {		// 슬라이드 효과 off
										$(ele).children("ul").css("visibility", "visible");
									}

								}
							}
						} else {		// 옵션값 menuOverHold 가 false 일때

							$("ul#user-menu > li").not($(ele)).children("ul").css({"visibility": "hidden"});	// 해당 섹션(마우스오버)을 제외한 2차 섹션 초기화

							if($(ele).find("ul > li").length <= 0) return;			// 2차 섹션이 없으면 return
							$("#user-nav").addClass("active");								// 2차 섹션 배경

							if($(ele).children("ul").is(":animated") == false){			// 2차 섹션 동작하지 않을 때
								if($(ele).children("ul").css("visibility") != "visible"){	// 해당 2차 섹션이 감춰져 있을 때

									$("ul#user-menu > li > ul").css({"visibility": "hidden"});		// 2차 초기화
									if(effectSwitch == "on") {	// 슬라이드 효과 on
										$(ele).children("ul").css("visibility", "visible").hide().slideDown(subSlideSpeed);		// 2차
									} else {		// 슬라이드 효과 off
										$(ele).children("ul").css("visibility", "visible");	// 2차
									}
								} else {		// 해당 2차 섹션이 감춰져 있지 않을 때 (설정을 안해줄 시 같은 섹션에 마우스를 올릴 때마다 작동됨)
									$(ele).children("ul").css("visibility", "visible");	// 2차
								}
							}
						}

					} else {	// vertical

						$("ul#user-menu > li > a").removeClass("a-hover");		// 1차 a-hover 초기화
						$(ele).children("a").addClass("a-hover");	// 해당 섹션에 a-hover 추가

						if($(ele).find("ul > li").length <= 0) return;			// 2차가 없으면 return
						if($(ele).children("ul").is(":animated") == false){	// 2차 섹션 동작하지 않을 때
							if(effectSwitch == "on") {	//	슬라이드 효과 on
								$(ele).children("ul").css("visibility", "visible").hide().slideDown(subSlideSpeed);		// 2차
							} else {		//	슬라이드 효과 off
								$(ele).children("ul").css("visibility", "visible").show();	// 2차
							}
						}
					}
				}, function(){		// mouse leave(out)

					// 옵션값 menuOverHold가 true일 때
					if(menuOverHold == true) {
						$("ul#user-menu > li > a").removeClass("a-hover");			// 초기화
						$("ul#user-menu > li > a.a-active").addClass("a-hover");	// 현재페이지 섹션에 a-hover 클래스 추가
					}
					
					if(submenuStyle == "horizon") {		// horizon

						$("#user-nav").removeClass("active");		// 2차 섹션 배경

						if(menuOverHold == true) {

							$(ele).children("ul").css({"visibility": "hidden"});		// 2차

							if(subShow == "hold") {		// 2차 메뉴가 고정일 때
								if($(".a-active").next("ul").find("li").length <= 0) return;			// 현재페이지 섹션에 2차 섹션이 없을 때 return
								$(".a-active").next("ul").css("visibility", "visible");			// 2차
							} else if(subShow == "hidden") {	// 2차 메뉴가 고정이 아닐 때
								$("ul#user-menu > li > ul").css({"visibility": "hidden"});		// 2차
							} else if(subShow == "page") {		// 2차 메뉴가 메인을 제외한 나머지 페이지에서만 고정일 때
								if(mainSecCode == "/index.html" || mainSecCode == "/index2.html" || mainSecCode == "/") {	// 메인화면 일 때
									$(".a-active").next("ul").css({"visibility": "hidden"});		// 2차
								} else {	// 메인화면이 아닐 때
									$(".a-active").next("ul").css("visibility", "visible");		// 2차
								}
							}

						} else {		// menuOverHold == false

							if(subShow == "hold"){		// 2차 메뉴가 고정일 때
								if($(ele).find("ul > li").length <= 0) return;		// 마우스가 벗아난 섹션에 2차 섹션이 없을 때 return
								$(ele).children("ul").css("visibility", "visible");	// 2차
							} else if(subShow == "hidden") {		// 2차 메뉴가 고정이 아닐 때
								$("ul#user-menu > li > ul").css({"visibility": "hidden"});		// 2차
							} else if(subShow == "page") {		// 2차 메뉴가 메인을 제외한 나머지 페이지에서만 고정일 때
								if(mainSecCode == "/index.html" || mainSecCode == "/index2.html" || mainSecCode == "/") {	// 메인화면 일 때
									$("ul#user-menu > li > ul").css({"visibility": "hidden"});		// 2차
								} else {	// 메인화면이 아닐 때
									$(ele).children("ul").css("visibility", "visible");	// 2차
								}
							}
						}
					} else {									// vertical
						if(effectSwitch == "on") {	// 슬라이드 효과 on
							$(ele).children("ul").fadeOut(subFadeSpeed);
						} else {	// 슬라이드 효과 off
							$(ele).children("ul").hide();
						}
					}
				});
				
				// 웹접근성 focus - 1차
				$(ele).children("a").focus(function(){
					$("ul#user-menu > li > a").removeClass("a-hover");
					$("ul#user-menu > li > ul").css("visibility", "hidden");

					$(ele).children("a").addClass("a-hover");
					if($(ele).find("ul > li").length <= 0) return;

					if($(ele).children("ul").css("display") != "block"){
						if(effectSwitch=="on"){
							$(ele).children("ul").css("visibility","visible").hide().slideDown(subSlideSpeed);
						} else {
							$(ele).children("ul").css("visibility","visible");
						}
					} else {
						$(ele).children("ul").css("visibility","visible");
					}
				});

				// 웹접근성 focus - 2차
				$(ele).find("ul > li").each(function(idx2, ele2){
					$(ele2).children("a").focus(function(){
						$("li.sub > a").removeClass("a-sub-hover");
						$(ele2).children("a").addClass("a-sub-hover");
					});
				});

			}
		});

		// 웹접근성 blur (focus out)
		$("ul#user-menu > li").last().children("ul").children("li").last().children("a").blur(function(e){
			if(menuOverHold == true) {
				$("ul#user-menu > li > a").removeClass("a-hover");
				$("ul#user-menu > li > ul").css("visibility","hidden");
				$("ul#user-menu > li > a.a-active").addClass("a-hover");
				subShowFn();	// 2차 노출설정
			} else {
				subShowFn();	// 2차 노출설정
			}
		});


		/******************************************************************
		* note : 2차 섹션 위치값 적용
		*
		* [참고]
		* 1. parseInt(A, 10) : 문자 타입(A)을 숫자(10진수) 타입으로 변경
		* 2. A.width() : 선택한 요소(A)의 가로크기를 반환 (padding, border 제외)
		* 3. A.outerWidth() : 선택한 요소(A)의 가로크기를 반환 (padding, border 포함)
		* 4. A.position().left : 선택한 요소(A)의 left 위치값 반환.
		* 5. Math.ceil(A) : A값 소수점 올림한 값을 반환.
		* 6. A.getBoundingClientRect() : A에 대한 절대값 반환.(소수점 포함)
		******************************************************************/
		// 넓이구하기 (소수점 포함)
		function getWidth(ele) {
			var rect = $(ele)[0].getBoundingClientRect();
			return rect.width;
		}

		$("ul#user-menu > li").each(function(){

			var bodyWidth = $(window).outerWidth();													// 사이트 전체 넓이
			var navWidth = $("#user-nav").width();														// user-nav 전체 넓이
			var menuWidth = $("#user-menu").width();													// user-menu 전체 넓이
			var modeInner = $(".mode-inner").width();													// 기준넓이
			var allBtn = $(".user-menu").prev(".user-allbtn");											// 전체메뉴
			var allBtnWidthCeil = (allBtn.length > 0) ? Math.ceil(getWidth(allBtn)) : 0;				// 전체메뉴 버튼 넓이 (소수점 올림)
			var allBtnWidth = (allBtnWidthCeil%2 > 0) ? (allBtnWidthCeil + 1) : allBtnWidthCeil;	// 전체메뉴 버튼 넓이 (홀수면 + 1)
			allBtn.css("width", allBtnWidth);																	// 전체메뉴 버튼 넓이 적용 (1차 섹션 위치값을 구하기 위해 넓이 적용)
			var secWidthCeil = Math.ceil(getWidth($(this)));												// 1차 넓이 (소수점 올림)	
			var secWidth = (secWidthCeil%2 > 0) ? (secWidthCeil + 1) : secWidthCeil;			// 1차 넓이 (홀수면 +1)
			var secLeft = allBtnWidth + parseInt($(this).position().left, 10);							// 1차 위치값 (left)
			var secRight = parseInt(modeInner - (secWidth + secLeft), 10);						// 1차 위치값 (right)
			var subObj = ($(this).children("ul").length > 0) ? $(this).children("ul") : $(this);		// 2차 메뉴
			var subWidthCeil = Math.ceil(getWidth(subObj));												// 2차 메뉴 넓이 (소수점 올림)
			var subWidth = (subWidthCeil%2 > 0) ? (subWidthCeil + 1) : subWidthCeil;			// 2차 메뉴 넓이 (홀수면 +1)
			var leftOverWidth = 0;																				// 2차 메뉴가 왼쪽 시작점을 넘어가는 값
			var rightOverWidth = 0;																			// 2차 메뉴가 오른쪽 끝점을 넘어가는 값

			/**********************************
			각 섹션 넓이값 적용
			**********************************/
			$(this).css("width", secWidth);
			if(submenuStyle == "vertical"){
				subObj.css("min-width", secWidth);
			} else {
				subObj.css("min-width", subWidth);
			}
			
			/**********************************
			2차 섹션 위치값 적용
			**********************************/
			// 자동박스 노출을 설정한 경우 위치값 적용 x (vartical & $useAutobox = true)
			if($("#header-wrapper").hasClass("vertical") && $("#header-wrapper").hasClass("nav-autobox")) return;

			if(submenuPosi == "left") {	// 2차 위치 설정값이 left 일 때

				rightOverWidth = parseInt(subWidth - (secWidth + secRight), 10); // 2차넓이 - (1차넓이 + right 위치값)

				// 2차 섹션이 우측영역을 벗어날 경우
				if(rightOverWidth > 0) {
					$(this).children("ul").css({
						"margin-left" : -(rightOverWidth)
					});
				}

			} else if(submenuPosi == "center") {	// 2차 위치 설정값이 center 일 때

				leftOverWidth = parseInt(((subWidth - secWidth) / 2) - secLeft, 10);		// ((2차넓이 - 1차넓이) 나누기 2) - left위치값
				rightOverWidth = parseInt(((subWidth - secWidth) / 2) - secRight, 10);	// ((2차넓이 - 1차넓이) 나누기 2) - right위치값

				if(leftOverWidth > 0) {				
					// 2차 섹션이 좌측을 벗어날 경우
					$(this).children("ul").css({
						"margin-left" : leftOverWidth
					});
				} else if(rightOverWidth > 0) {
					// 2차 섹션이 우측을 벗어날 경우
					$(this).children("ul").css({
						"margin-left" : -(rightOverWidth)
					});
				}

			} else if(submenuPosi == "right") {	// 2차 위치 설정값이 right 일 때

				leftOverWidth = parseInt(subWidth - (secWidth + secLeft), 10);		// 2차넓이 - (1차넓이 + left 위치값)

				// 2차 섹션이 좌측을 벗어날 경우
				if(leftOverWidth > 0) {
					$(this).children("ul").css({
						"margin-right" : -(leftOverWidth)
					});
				}
			}

		});

		/******************************************************************
		* note : 2차섹션 노출설정
		*
		* [설명 및 참고]
		* - 메뉴스타일이 horizon일 때만 적용
		* - slide효과를 제외한 visibility속성만 설정 (slide효과는 상단에서 마우스 오버 & 아웃 시에 구현하였습니다.)
		******************************************************************/
		$("ul#user-menu > li").each(function(){
			subShowFn();
		});
		function subShowFn(){
			if(submenuStyle == "horizon"){
				if(subShow == "hold") {
					if($(".a-active").next("ul").find("li").length <= 0) return;		// 현재페이지 1차 섹션에 2차 섹션이 없으면 return
					$(".a-active").next("ul").css("visibility", "visible");			// 2차 섹션
				} else if(subShow == "hidden") {
					$(".a-active").next("ul").css("visibility", "hidden");
				} else if(subShow == "page") {	
					if(mainSecCode == "/index.html" || mainSecCode == "/index2.html" || mainSecCode == "/") { // index일 때
						$(".a-active").next("ul").css("visibility", "hidden");
					} else {	// index가 아닐 때
						$(".a-active").next("ul").css("visibility", "visible");
					}
				}
			}
		}
	
	});

})(jQuery);